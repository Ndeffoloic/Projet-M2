import streamlit as st
import pandas as pd
import numpy as np
from typing import Tuple, Optional

def display_error(message: str) -> None:
    """Affiche un message d'erreur"""
    st.error(f"üö® {message}")

def display_success(message: str) -> None:
    """Affiche un message de succ√®s"""
    st.success(f"‚úÖ {message}")

def display_info(message: str) -> None:
    """Affiche un message d'information"""
    st.info(f"‚ÑπÔ∏è {message}")

def display_parameters(params: dict) -> None:
    """
    Affiche les param√®tres estim√©s
    
    Args:
        params: Dictionnaire des param√®tres
    """
    st.subheader("Param√®tres estim√©s")
    
    col1, col2 = st.columns(2)
    
    with col1:
        for key, value in params.items():
            st.write(f"{key}: {value:.6f}")
    
    with col2:
        st.markdown("""
        **Interpr√©tation:**
        - Œº: Drift (tendance)
        - œÉ¬≤: Variance de la volatilit√©
        - Œª: Vitesse de retour √† la moyenne
        """)

def format_data_summary(data: pd.Series) -> None:
    """
    Affiche un r√©sum√© des donn√©es
    
    Args:
        data: S√©rie temporelle √† analyser
    """
    st.subheader("R√©sum√© des donn√©es")
    
    summary = pd.DataFrame({
        'Statistique': [
            'Nombre d\'observations',
            'Premi√®re date',
            'Derni√®re date',
            'Prix minimum',
            'Prix maximum',
            'Prix moyen',
            '√âcart-type',
            'Skewness',
            'Kurtosis'
        ],
        'Valeur': [
            len(data),
            data.index.min().strftime('%Y-%m-%d'),
            data.index.max().strftime('%Y-%m-%d'),
            f"{data.min():.2f}",
            f"{data.max():.2f}",
            f"{data.mean():.2f}",
            f"{data.std():.2f}",
            f"{data.skew():.2f}",
            f"{data.kurtosis():.2f}"
        ]
    })
    
    st.dataframe(summary, hide_index=True)

def check_data_quality(data: pd.Series) -> Tuple[bool, list]:
    """
    V√©rifie la qualit√© des donn√©es
    
    Args:
        data: S√©rie temporelle √† v√©rifier
        
    Returns:
        Tuple[bool, list]: (donn√©es valides?, liste des probl√®mes)
    """
    issues = []
    
    # V√©rifier les valeurs manquantes
    if data.isna().any():
        issues.append(f"Donn√©es manquantes: {data.isna().sum()} valeurs")
    
    # V√©rifier les valeurs n√©gatives
    if (data < 0).any():
        issues.append("Pr√©sence de prix n√©gatifs")
    
    # V√©rifier les valeurs extr√™mes
    z_scores = np.abs((data - data.mean()) / data.std())
    if (z_scores > 5).any():
        n_outliers = (z_scores > 5).sum()
        issues.append(f"Valeurs extr√™mes d√©tect√©es: {n_outliers} observations")
    
    # V√©rifier la fr√©quence des donn√©es
    time_diffs = data.index.to_series().diff()
    if time_diffs.nunique() > 1:
        issues.append("Fr√©quence d'√©chantillonnage irr√©guli√®re")
    
    return len(issues) == 0, issues
